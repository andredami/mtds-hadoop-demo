datarecords = LOAD 'data' AS (mid:long,timestamp:long,plugid:int,householdid:int,houseid:int,measurement:int);
start_timestamp = min(datarecords.timestamp);
parsed_datarecord = FOREACH datarecords GENERATE (timestamp-start_timestamp)/3600 AS hourindex:int, plugid, householdid, houseid, measurement;
data_per_househour= GROUP parsed_datarecord BY houseid, hourindex;
house_median = FOREACH data_per_househour GENERATE group, MEDIAN(parsed_datarecord.measurement) AS house_median:float;
data_per_plughour=  GROUP parsed_datarecord BY houseid, hourindex, householdid, plugid;
plug_median = FOREACH data_per_plughour GENERATE group, MEDIAN(parsed_datarecord.measurement) AS plug_median:float;
data_per_househour_flat= FOREACH data_per_househour GENERATE FLATTEN(parsed_datarecord);
data_per_plughour_flat= FOREACH data_per_plughour GENERATE FLATTEN(parsed_datarecord);
pre_outliers = JOIN data_per_househour_flat BY hourindex, houseid, data_per_plughour_flat BY hourindex, houseid;
outliers = FOREACH pre_outliers GENERATE hourindex, houseid, (plug_median - house_median) AS test:int;
outliers_only = FILTER outliers BY test > 0;
pre_outliers_count = GROUP outliers_only BY hourindex, houseid;
outliers_count = FOREACH pre_outliers_count GENRATE group, COUNT(*) AS outliers_num:int;
pre_plugs_count = GROUP parsed_datarecord BY hourindex, houseid;
plugs_count = FOREACH pre_plugs_count GENRATE group, COUNT(*) AS plugs_num:int;
perc_eval = JOIN outliers_count BY group, plugs_count BY group;
perc_val = FOREACH per_eval GENERATE group, (outliers_num/plugs_num)*100;
DUMP perc_val;
