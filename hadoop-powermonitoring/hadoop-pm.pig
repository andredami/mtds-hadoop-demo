datarecords = LOAD '/user/hduser/data.csv' USING PigStorage(',') AS(mid:long,timestamp:long,plugid:int,householdid:int,houseid:int,measurement:int);
top_bag = GROUP datarecords ALL;
start= FOREACH top_bag GENERATE MIN(datarecords.timestamp) AS timestamp;
parsed_datarecord = FOREACH datarecords GENERATE (timestamp-start.timestamp)/(long)3600 AS hourindex:long, plugid, householdid, houseid, measurement;
data_per_househour= GROUP parsed_datarecord BY (houseid, hourindex);
house_median = FOREACH data_per_househour GENERATE group, AVG(parsed_datarecord.measurement) AS house_median:double;
data_per_plughour=  GROUP parsed_datarecord BY (houseid, hourindex, householdid, plugid);
plug_median = FOREACH data_per_plughour GENERATE group, AVG(parsed_datarecord.measurement) AS plug_median:double;
house_median_flat= FOREACH house_median GENERATE FLATTEN(group), house_median;
plug_median_flat= FOREACH plug_median GENERATE FLATTEN(group), plug_median;
pre_outliers = JOIN house_median_flat BY (group::hourindex, group::houseid), plug_median_flat BY (group::hourindex, group::houseid);
outliers = FOREACH pre_outliers GENERATE house_median_flat::group::hourindex AS hourindex, house_median_flat::group::houseid AS houseid,(plug_median_flat::plug_median - house_median_flat::house_median) AS test:double;
outliers_only = FILTER outliers BY test > (double)0;
pre_outliers_count = GROUP outliers_only BY (houseid, hourindex);
outliers_count = FOREACH pre_outliers_count GENERATE group, COUNT(outliers_only) AS outliers_num:int;
data_per_plug = GROUP parsed_datarecord BY (houseid, hourindex, householdid, plugid);
pre_pre_plugs_count = FOREACH data_per_plug GENERATE FLATTEN(group), MIN(parsed_datarecord.measurement) AS test;
pre_plugs_count = GROUP pre_pre_plugs_count BY (group::houseid, group::hourindex);
plugs_count = FOREACH pre_plugs_count GENERATE group, COUNT(pre_pre_plugs_count) AS plugs_count;
perc_eval = JOIN outliers_count BY group, plugs_count BY group;
perc_val = FOREACH perc_eval GENERATE outliers_count::group, ((outliers_count::outliers_num/plugs_count::plugs_count)*100) AS perc:double;
DUMP perc_val;